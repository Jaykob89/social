{"version":3,"sources":["HOC/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","fullName","aboutMe","Preloader","Post","item","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postsElement","posts","map","p","postBlock","AddPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","Field","name","component","TextArea","validate","required","placeholder","MyPostsContainer","profilePage","newText","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authUserId","history","push","ProfileTC","getStatusTC","updateStatusTC","compose","withRouter"],"mappings":"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","file":"static/js/3.3ead8af5.chunk.js","sourcesContent":["import React, {Component, ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to='/login'/>\n        return <Component {...restProps as T}/>;\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n    return ConnectedAuthRedirectComponent;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3b6E0\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype propsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks = (props: propsType) => {\n\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n\n    let activeEditMode = () => {\n        setEditMode(true)\n    }\n    let deActiveEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activeEditMode}>{props.status || \"-----\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input autoFocus={true} onBlur={deActiveEditMode} onChange={onStatusChange} value={status}/>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {profileType} from \"../Profile\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype propsType = {\r\n    profile: profileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}: propsType) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return <div>\r\n\r\n        <div className={s.descriptionBlock}>\r\n            <img src={profile.photos.large}/>\r\n            <div>{profile.fullName}</div>\r\n            <div>{profile.aboutMe}</div>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype messageType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: messageType) => {\r\n    return <div className={s.item}>\r\n        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSxLkbtTa0kfmKizxJgqECQLdlt_xq1R2jEQQ&usqp=CAU\"/>\r\n        {props.message}\r\n        <div>\r\n            <span>like </span>\r\n            {props.likesCount}\r\n        </div>\r\n\r\n    </div>\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {TextArea} from \"../../common/FormsControl/FormsControl\";\r\n\r\ntype postsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\ntype myPostPropsType = {\r\n    posts: Array<postsType>\r\n    addPost: (newPostText: string) => void\r\n    newText: string\r\n}\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props: myPostPropsType) => {\r\n    let postsElement = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let OnAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return <div className={s.postBlock}>\r\n        <h3>My posts</h3>\r\n        <AddPostFormRedux onSubmit={OnAddPost}/>\r\n        <div className={s.posts}>\r\n            {postsElement}\r\n        </div>\r\n    </div>\r\n});\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={TextArea} validate={[required, maxLength10]}\r\n                       placeholder={'text'}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(AddPostForm)\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostAC} from \"../../../redux/profile-reducer\"\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../../../redux/store\";\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\ntype photosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type profileType = {\r\n    photos: photosType,\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        [key: string]: string | null\r\n        //.....\r\n    }\r\n}\r\n\r\ntype profileInfoType = {\r\n    profile: profileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: profileInfoType) => {\r\n\r\n    return <div>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile, {profileType} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusTC, ProfileTC, updateStatusTC} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype OwnPropsType = mapStatePropsType & mapDispatchPropsType\r\ntype PropsType = RouteComponentProps<pathParamTypes> & OwnPropsType\r\n\r\ntype pathParamTypes = {\r\n    userId: string\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    profile: profileType | null\r\n    isAuth: boolean\r\n    status: string\r\n    authUserId: string\r\n}\r\ntype mapDispatchPropsType = {\r\n    ProfileTC: (userId: string) => void\r\n    getStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.ProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <div>\r\n            <Profile {...this.props} status={this.props.status} updateStatus={this.props.updateStatusTC}/>\r\n        </div>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {ProfileTC, getStatusTC, updateStatusTC}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}