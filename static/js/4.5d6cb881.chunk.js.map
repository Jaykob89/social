{"version":3,"sources":["components/Dialogs/Dialogs.module.css","HOC/withAuthRedirect.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","Message","className","s","message","DialogItem","path","id","dialog","active","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElement","messages","dialogsItems","values","addMessage","newDialogElementAdd","compose","massagesPage","dispatch","addMessageAC"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oHCQ/MC,EAA6B,SAACC,GAAD,MAA6C,CAC1EC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAoBC,GAQhC,OADqCC,YAAQN,EAARM,EANX,SAACC,GAA8B,IAChDL,EAAwBK,EAAxBL,OAAWM,EADoC,YACvBD,EADuB,YAEpD,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAG,gB,qFCL1BC,EAJC,SAACH,GACb,OAAO,qBAAKI,UAAWC,IAAEC,QAAlB,SAA4BN,EAAMM,W,QCW9BC,EATI,SAACP,GAChB,IAAIQ,EAAO,YAAcR,EAAMS,GAC/B,OACI,qBAAKL,UAAWC,IAAEK,OAAS,IAAML,IAAEM,OAAnC,SACI,cAAC,IAAD,CAAST,GAAIM,EAAb,SAAoBR,EAAMY,U,iCCLhCC,EAAcC,YAAiB,IAexBC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAb+B,SAAChB,GAC/D,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAC1CD,KAAM,sBAAuBa,YAAa,yBAErD,8BACI,kDCyBDC,EA1BC,SAAC1B,GAEb,IAAIN,EAAQM,EAAM2B,YAEdC,EAAkBlC,EAAMmC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAMH,GAAIsB,EAAEtB,QACzEuB,EAAkBtC,EAAMuC,SAASH,KAAI,SAAAxB,GAAO,OAAI,cAAC,EAAD,CAASA,QAASA,EAAQA,aAK9E,OACI,sBAAKF,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAE6B,aAAlB,SACKN,IAIL,qBAAKxB,UAAWC,IAAE4B,SAAlB,SACKD,IAGL,cAACjB,EAAD,CAAqBG,SAdV,SAACiB,GAChBnC,EAAMoC,WAAWD,EAAOE,4B,wBCDjBC,sBACXvC,aAjBkB,SAACL,GACnB,MAAO,CACHiC,YAAajC,EAAM6C,iBAIF,SAACC,GACtB,MAAO,CACHJ,WAAY,SAACC,GACTG,EAASC,YAAaJ,SAS9BxC,IAFWyC,CAGbZ","file":"static/js/4.5d6cb881.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React, {Component, ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to='/login'/>\n        return <Component {...restProps as T}/>;\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n    return ConnectedAuthRedirectComponent;\n}\n","import React from \"react\";\nimport s from './../Dialogs.module.css'\n\ntype MessageType = {\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n    return <div className={s.message}>{props.message}</div>\n}\n\nexport default Message;","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport s from './../Dialogs.module.css'\n\ntype DialogItemType = {\n    name: string\n    id: number\n}\n\n\nconst DialogItem = (props: DialogItemType) => {\n    let path = \"/dialogs/\" + props.id;\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {TextArea} from \"../../common/FormsControl/FormsControl\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\n\ntype FormDataType = {\n    newDialogElementAdd: string\n}\n\nconst maxLength50 = maxLengthCreator(10)\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={TextArea} validate={[required, maxLength50]}\n                       name={'newDialogElementAdd'} placeholder={'Enter your message'}/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\n\n","import React from \"react\";\nimport s from './Dialogs.module.css'\nimport Message from \"./Message/Message\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport {massagesPageType} from \"../../redux/store\";\nimport {AddMessageFormRedux} from \"./AddMessageForm/AddMessageForm\";\n\ntype FormDataType = {\n    newDialogElementAdd: string\n}\n\nexport type DialogPropsType = {\n    dialogsPage: massagesPageType\n    newMessageText: string\n    updateNewMessage: (text: string) => void\n    addMessage: (values: string) => void\n    isAuth: boolean\n}\nconst Dialogs = (props: DialogPropsType) => {\n\n    let state = props.dialogsPage\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\n    let messagesElement = state.messages.map(message => <Message message={message.message}/>)\n\n    let OnAddMessage = (values: FormDataType) => {\n        props.addMessage(values.newDialogElementAdd);\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n\n            </div>\n\n            <div className={s.messages}>\n                {messagesElement}\n\n            </div>\n            <AddMessageFormRedux onSubmit={OnAddMessage}/>\n        </div>\n    )\n}\n\nexport default Dialogs;","import React from \"react\";\nimport {addMessageAC} from '../../redux/dialog-reducer'\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {compose, Dispatch} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\n\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.massagesPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addMessage: (newDialogElementAdd: string) => {\n            dispatch(addMessageAC(newDialogElementAdd))\n        }\n    }\n}\n\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);"],"sourceRoot":""}